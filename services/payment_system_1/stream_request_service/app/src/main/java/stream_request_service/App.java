/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stream_request_service;

import akka.NotUsed;

import akka.actor.ActorSystem;

import akka.http.javadsl.ConnectHttp;
import akka.http.javadsl.Http; 
import akka.http.javadsl.ServerBinding; 
import akka.http.javadsl.model.HttpRequest; 
import akka.http.javadsl.model.HttpResponse;

import akka.stream.ActorMaterializer; 
import akka.stream.javadsl.Flow;

import java.util.concurrent.CompletionStage;
import java.io.IOException;

import stream_request_service.rest.ClientApi;

public final class App {

    private static final String domain = "localhost";
    private static final int port = 8011;

    public static void main(String[] args) throws IOException {
        final ActorSystem system = ActorSystem.create("stream-request-server");
        final ActorMaterializer materializer = ActorMaterializer.create(system);
        final Http http = Http.get(system);

        ClientApi clientApi = new ClientApi();

        final Flow<HttpRequest, HttpResponse,NotUsed> routeFlow = clientApi.createRoute().flow(system, materializer);

        final CompletionStage<ServerBinding> binding = http.bindAndHandle (
            routeFlow,
            ConnectHttp.toHost(domain, port),
            materializer
        );

        System.out.println("Server is online");
        System.in.read();

        binding
            .thenCompose(ServerBinding::unbind)
            .thenAccept(unbound -> system.terminate());

        System.out.println("Server is offline");
    }
}
