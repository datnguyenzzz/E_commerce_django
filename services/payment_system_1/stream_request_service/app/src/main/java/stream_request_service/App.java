/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stream_request_service;

import akka.NotUsed;

import akka.actor.ActorSystem;

import akka.http.javadsl.ConnectHttp;
import akka.http.javadsl.Http; 
import akka.http.javadsl.ServerBinding; 
import akka.http.javadsl.server.AllDirectives;
import static akka.http.javadsl.server.Directives.extractRequest;
import akka.http.javadsl.server.Route;
import akka.http.javadsl.model.HttpRequest; 
import akka.http.javadsl.model.HttpResponse;

import akka.http.javadsl.marshallers.jackson.Jackson;
import akka.http.javadsl.unmarshalling.Unmarshaller;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;

import akka.stream.ActorMaterializer; 
import akka.stream.javadsl.Flow;

import java.util.concurrent.CompletionStage;
import java.io.IOException;

class PaymentInfo {
    private int id; 
    private int amount; 

    @JsonCreator
    public PaymentInfo(@JsonProperty("id") int id,@JsonProperty("amount") int amount) {
        this.id = id;
        this.amount = amount;
    }

    public int getId() {
        return this.id;
    }

    public int getAmount() {
        return this.amount;
    }

    public String toString() {
        return "id = " + this.id + '\n'
              +"Amount = " + this.amount;
    }
}

class HandleBody extends AllDirectives {

    public Route createRoute() {
        return concat(getApi(),postApi());
    }

    private Route getApi() {
        return get(() -> 
            path("payment_api", () ->
                complete("Get Api")));
    }

    private Route postApi() {
        //return extractRequest(req -> complete(req.method().name() + " " + req.entity()));
        return post(() ->
            path("payment_api", () -> 
                entity(Jackson.unmarshaller(PaymentInfo.class), 
                       req -> complete(req.toString()))));
    }

    public HandleBody() {}
}

public final class App {

    private static final String domain = "localhost";
    private static final int port = 8011;

    public static void main(String[] args) throws IOException {
        final ActorSystem system = ActorSystem.create("stream-request-server");
        final ActorMaterializer materializer = ActorMaterializer.create(system);
        final Http http = Http.get(system);

        HandleBody handleBody = new HandleBody();

        final Flow<HttpRequest, HttpResponse,NotUsed> routeFlow = handleBody.createRoute().flow(system, materializer);

        final CompletionStage<ServerBinding> binding = http.bindAndHandle (
            routeFlow,
            ConnectHttp.toHost(domain, port),
            materializer
        );

        System.out.println("Server is online");
        System.in.read();

        binding
            .thenCompose(ServerBinding::unbind)
            .thenAccept(unbound -> system.terminate());

        System.out.println("Server is offline");
    }
}
