version: '3.8'
services:

## Prometheus and blackbox-exporter
  prometheus:
    container_name: prometheus
    image: prom/prometheus
    volumes:
      - ./prometheus-config/:/etc/prometheus/
    ports:
      - 9090:9090
    restart: always
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"

  blackbox-exporter:
    image: prom/blackbox-exporter
    ports:
      - 9115:9115
## Grafana
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000

## zipkin
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - 9411:9411

# Message queue
  zookeeper:
    image: wurstmeister/zookeeper:latest
    hostname: zookeeper 
    container_name: zookeeper 
    ports:
      - "2181:2181"  
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181 
      ZOOKEEPER_TICK_TIME: 2000
  
  kafka:
    image: wurstmeister/kafka:latest
    hostname: kafka 
    container_name: kafka 
    depends_on:
      - zookeeper 
    ports:
      - "9092:9092" 
    expose:
      - "9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,OUTSIDE:PLAINTEXT

      KAFKA_LISTENERS: PLAINTEXT://kafka:9092,OUTSIDE://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,OUTSIDE://localhost:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT

# database
  redis:
    container_name: redis
    image: redis:6.0.6
    ports:
      - 6379:6379
  
  postgresql:
    container_name: postgresql
    image: postgres:latest
    ports:
      - 5432:5432
    volumes:
      - ./postgrepsql-custom-config:/custom_config
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_USER: postgres
      POSTGRES_DB: EventSource
    command: "postgres -c config_file=/custom_config/postgresql.conf"
## Dynamo
  dynamodb:
    image:  amazon/dynamodb-local
    container_name: dynamodb
    hostname: dynamodb
    restart: always
    volumes:
      -  ./my-dynamodb-data:/home/dynamodblocal/data
    ports:
      - 8000:8000
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath /home/dynamodblocal/data/"

## RECOMMENDER SERVICE
  nimbus:
    image: storm:1.2.4
    container_name: nimbus
    depends_on:
      - zookeeper
    restart: always
    ports:
      - 6627:6627
    command: storm nimbus -c topology.worker.max.heap.size.mb=65536 -c worker.heap.memory.mb=65536
  
  supervisor:
    image: storm:1.2.4
    depends_on:
      - zookeeper
      - nimbus
    restart: always
    volumes:
      - ./storm/supervisor/logs:/logs
    command: storm supervisor -c worker.childopts=-Xmx%HEAP-MEM%m -c worker.heap.memory.mb=65536 -c supervisor.memory.capacity.mb=262144 -c worker.profiler.enabled=true
  
  ui:
    image: storm:1.2.4
    container_name: ui
    depends_on:
      - nimbus
    restart: always
    ports:
      - 8080:8080
    command: storm ui
  